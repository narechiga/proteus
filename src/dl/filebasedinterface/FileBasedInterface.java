package dl.filebasedinterface;

import interfaces.text.TextOutput;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Date;
import java.util.UUID;

public abstract class FileBasedInterface {

	protected abstract String getCommand(); // Returns the name of the command to run the file
	protected abstract String getToolName(); // Returns tool name, to annotate the workspace
	protected abstract String getFileExtension(); // Returns the file extension, for writing external files
	protected abstract String commentLine( String commentLine );
	
	protected File writeToFile( String scriptString ) {
		String filename = decorateFilename("optimization");
		try {
			PrintWriter scriptFile = new PrintWriter( filename );
			scriptFile.println( scriptString );
			scriptFile.close();
		} catch ( Exception e ) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
		return new File( filename );
	}
	
	public String runScript( File scriptFile ) {
		ProcessBuilder queryPB;
		Process queryProcess;
		String totalOutput = "error"; // default result if we cannot successfully run the process
		try {
			queryPB = new ProcessBuilder( getCommand(), scriptFile.getAbsolutePath() );
			queryPB.redirectErrorStream( true );
			queryProcess = queryPB.start();

			BufferedReader pythonSays = new BufferedReader( new InputStreamReader(queryProcess.getInputStream()) );
			String line;
			totalOutput = "";
			while ( (line = pythonSays.readLine()) != null) {
				totalOutput += line;
				TextOutput.setDebug(true);
				TextOutput.debug( line );
				TextOutput.setDebug( false );
			}
		} catch ( Exception e ) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}

		return totalOutput;
	}
	
	public String decorateFilename( String base ) {
		return decorateFilename( this.getToolName(), base, this.getFileExtension() );
	}
	public String decorateFilename( String workSpaceName, String base, String fileExtension ) {
		double randomID = Math.round(Math.random());
		Date date = new Date();
		String formatted_date = date.toString();
		formatted_date = formatted_date.replace(" ","_");
		String filename = System.getProperty("java.io.tmpdir") + File.separator 
							+ System.getProperty("user.name") + "_" + workSpaceName 
							+ File.separator + base + UUID.randomUUID().toString().replaceAll("-", "") + "_"+ formatted_date + "." + randomID + "." + fileExtension;		
		File targetFile = new File( filename );
		targetFile.getParentFile().mkdirs();
		return filename;
	}
	
	protected String timeStampComment() {
		Date date = new Date();
		String timeStamp = commentLine("Automatically generated by Proteus on " + date.toString()) + "\n\n";
		return timeStamp;
	}
	
	protected String comment( String comments ) {
		String[] lines = comments.split("\n");
		String comment = "";
		for ( int k = 0; k < lines.length; k++ ) {
			comment += commentLine( lines[k] ) + "\n";
		}
		return comment;
	}

}
